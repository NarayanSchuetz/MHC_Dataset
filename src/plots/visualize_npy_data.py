import os
import argparse
from plots.visualize_npy_matrix import visualize_npy_file, visualize_npy_directory

def main():
    """
    Command-line tool to visualize NPY files generated by create.py
    """
    parser = argparse.ArgumentParser(description="Visualize NPY matrix files with health and activity data")
    
    # Create subparsers for different commands
    subparsers = parser.add_subparsers(dest="command", help="Command to execute")
    
    # Single file visualization
    file_parser = subparsers.add_parser("file", help="Visualize a single NPY file")
    file_parser.add_argument("file_path", help="Path to the NPY file to visualize")
    file_parser.add_argument("--output", "-o", help="Path to save the visualization")
    file_parser.add_argument("--title", "-t", help="Title for the visualization")
    file_parser.add_argument("--figsize", "-f", nargs=2, type=int, default=[15, 10], 
                            help="Figure size in inches (width height)")
    file_parser.add_argument("--dpi", "-d", type=int, default=100, help="DPI for the output image")
    file_parser.add_argument("--features", "-fs", nargs="+", type=int, 
                            help="Indices of features to include (space-separated)")
    file_parser.add_argument("--no-show", action="store_true", help="Don't display the plot")
    
    # Directory visualization
    dir_parser = subparsers.add_parser("directory", help="Visualize all NPY files in a directory")
    dir_parser.add_argument("dir_path", help="Path to the directory containing NPY files")
    dir_parser.add_argument("--output-dir", "-o", help="Directory to save visualizations")
    dir_parser.add_argument("--figsize", "-f", nargs=2, type=int, default=[15, 10], 
                          help="Figure size in inches (width height)")
    dir_parser.add_argument("--dpi", "-d", type=int, default=100, help="DPI for the output images")
    dir_parser.add_argument("--features", "-fs", nargs="+", type=int, 
                          help="Indices of features to include (space-separated)")
    dir_parser.add_argument("--max-files", "-m", type=int, default=10, 
                          help="Maximum number of files to visualize")
    dir_parser.add_argument("--no-show", action="store_true", help="Don't display the plot")
    
    # Parse arguments
    args = parser.parse_args()
    
    # If no command is provided, show help
    if args.command is None:
        parser.print_help()
        return
    
    # Handle single file visualization
    if args.command == "file":
        if not os.path.exists(args.file_path):
            print(f"Error: File '{args.file_path}' does not exist.")
            return
        
        visualize_npy_file(
            npy_file_path=args.file_path,
            output_path=args.output,
            show_plot=not args.no_show,
            figsize=tuple(args.figsize),
            dpi=args.dpi,
            feature_subset=args.features,
            title=args.title
        )
    
    # Handle directory visualization
    elif args.command == "directory":
        if not os.path.exists(args.dir_path) or not os.path.isdir(args.dir_path):
            print(f"Error: Directory '{args.dir_path}' does not exist or is not a directory.")
            return
        
        visualize_npy_directory(
            directory_path=args.dir_path,
            output_directory=args.output_dir,
            max_files=args.max_files,
            show_plot=not args.no_show,
            figsize=tuple(args.figsize),
            dpi=args.dpi,
            feature_subset=args.features
        )

if __name__ == "__main__":
    main() 